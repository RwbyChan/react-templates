"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var chalk_1 = __importDefault(require("chalk"));
var dateformat_1 = __importDefault(require("dateformat"));
var strip_ansi_1 = __importDefault(require("strip-ansi"));
var inspect_1 = require("./inspect");
var now = function () {
    var date = dateformat_1.default(new Date(), '[dd/mm/yyyy hh:MM:ss]');
    return chalk_1.default.reset(date);
};
var level = function (logLevel) {
    switch (logLevel) {
        case 'info':
            return chalk_1.default.green(templateObject_1 || (templateObject_1 = __makeTemplateObject(["[INFO]"], ["[INFO]"])));
        case 'debug':
            return chalk_1.default.cyan(templateObject_2 || (templateObject_2 = __makeTemplateObject(["[DEBUG]"], ["[DEBUG]"])));
        case 'error':
            return chalk_1.default.red(templateObject_3 || (templateObject_3 = __makeTemplateObject(["[ERROR]"], ["[ERROR]"])));
        case 'verbose':
            return chalk_1.default.magenta(templateObject_4 || (templateObject_4 = __makeTemplateObject(["[VERBOSE]"], ["[VERBOSE]"])));
        case 'warn':
            return chalk_1.default.yellow(templateObject_5 || (templateObject_5 = __makeTemplateObject(["[WARN]"], ["[WARN]"])));
    }
};
var prefix = function (logLevel) {
    var type = level(logLevel).padEnd(19);
    var time = now();
    return time + " " + type + " |";
};
exports.construct = function (logLevel, object, strip) {
    var pre = prefix(logLevel);
    var pad = ' '.repeat(strip_ansi_1.default(pre).length - 1);
    var inspected = inspect_1.inspect(object);
    var str = inspected
        .split('\n')
        .map(function (line, i) { return (i === 0 ? pre + " " + line : pad + "| " + line); })
        .join('\n');
    return strip === true ? strip_ansi_1.default(str) : str;
};
var templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5;
